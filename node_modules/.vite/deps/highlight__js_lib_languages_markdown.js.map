{
  "version": 3,
  "sources": ["../../highlight.js/es/languages/markdown.js"],
  "sourcesContent": ["/*\r\nLanguage: Markdown\r\nRequires: xml.js\r\nAuthor: John Crepezzi <john.crepezzi@gmail.com>\r\nWebsite: https://daringfireball.net/projects/markdown/\r\nCategory: common, markup\r\n*/\r\n\r\nfunction markdown(hljs) {\r\n  const regex = hljs.regex;\r\n  const INLINE_HTML = {\r\n    begin: /<\\/?[A-Za-z_]/,\r\n    end: '>',\r\n    subLanguage: 'xml',\r\n    relevance: 0\r\n  };\r\n  const HORIZONTAL_RULE = {\r\n    begin: '^[-\\\\*]{3,}',\r\n    end: '$'\r\n  };\r\n  const CODE = {\r\n    className: 'code',\r\n    variants: [\r\n      // TODO: fix to allow these to work with sublanguage also\r\n      { begin: '(`{3,})[^`](.|\\\\n)*?\\\\1`*[ ]*' },\r\n      { begin: '(~{3,})[^~](.|\\\\n)*?\\\\1~*[ ]*' },\r\n      // needed to allow markdown as a sublanguage to work\r\n      {\r\n        begin: '```',\r\n        end: '```+[ ]*$'\r\n      },\r\n      {\r\n        begin: '~~~',\r\n        end: '~~~+[ ]*$'\r\n      },\r\n      { begin: '`.+?`' },\r\n      {\r\n        begin: '(?=^( {4}|\\\\t))',\r\n        // use contains to gobble up multiple lines to allow the block to be whatever size\r\n        // but only have a single open/close tag vs one per line\r\n        contains: [\r\n          {\r\n            begin: '^( {4}|\\\\t)',\r\n            end: '(\\\\n)$'\r\n          }\r\n        ],\r\n        relevance: 0\r\n      }\r\n    ]\r\n  };\r\n  const LIST = {\r\n    className: 'bullet',\r\n    begin: '^[ \\t]*([*+-]|(\\\\d+\\\\.))(?=\\\\s+)',\r\n    end: '\\\\s+',\r\n    excludeEnd: true\r\n  };\r\n  const LINK_REFERENCE = {\r\n    begin: /^\\[[^\\n]+\\]:/,\r\n    returnBegin: true,\r\n    contains: [\r\n      {\r\n        className: 'symbol',\r\n        begin: /\\[/,\r\n        end: /\\]/,\r\n        excludeBegin: true,\r\n        excludeEnd: true\r\n      },\r\n      {\r\n        className: 'link',\r\n        begin: /:\\s*/,\r\n        end: /$/,\r\n        excludeBegin: true\r\n      }\r\n    ]\r\n  };\r\n  const URL_SCHEME = /[A-Za-z][A-Za-z0-9+.-]*/;\r\n  const LINK = {\r\n    variants: [\r\n      // too much like nested array access in so many languages\r\n      // to have any real relevance\r\n      {\r\n        begin: /\\[.+?\\]\\[.*?\\]/,\r\n        relevance: 0\r\n      },\r\n      // popular internet URLs\r\n      {\r\n        begin: /\\[.+?\\]\\(((data|javascript|mailto):|(?:http|ftp)s?:\\/\\/).*?\\)/,\r\n        relevance: 2\r\n      },\r\n      {\r\n        begin: regex.concat(/\\[.+?\\]\\(/, URL_SCHEME, /:\\/\\/.*?\\)/),\r\n        relevance: 2\r\n      },\r\n      // relative urls\r\n      {\r\n        begin: /\\[.+?\\]\\([./?&#].*?\\)/,\r\n        relevance: 1\r\n      },\r\n      // whatever else, lower relevance (might not be a link at all)\r\n      {\r\n        begin: /\\[.*?\\]\\(.*?\\)/,\r\n        relevance: 0\r\n      }\r\n    ],\r\n    returnBegin: true,\r\n    contains: [\r\n      {\r\n        // empty strings for alt or link text\r\n        match: /\\[(?=\\])/ },\r\n      {\r\n        className: 'string',\r\n        relevance: 0,\r\n        begin: '\\\\[',\r\n        end: '\\\\]',\r\n        excludeBegin: true,\r\n        returnEnd: true\r\n      },\r\n      {\r\n        className: 'link',\r\n        relevance: 0,\r\n        begin: '\\\\]\\\\(',\r\n        end: '\\\\)',\r\n        excludeBegin: true,\r\n        excludeEnd: true\r\n      },\r\n      {\r\n        className: 'symbol',\r\n        relevance: 0,\r\n        begin: '\\\\]\\\\[',\r\n        end: '\\\\]',\r\n        excludeBegin: true,\r\n        excludeEnd: true\r\n      }\r\n    ]\r\n  };\r\n  const BOLD = {\r\n    className: 'strong',\r\n    contains: [], // defined later\r\n    variants: [\r\n      {\r\n        begin: /_{2}(?!\\s)/,\r\n        end: /_{2}/\r\n      },\r\n      {\r\n        begin: /\\*{2}(?!\\s)/,\r\n        end: /\\*{2}/\r\n      }\r\n    ]\r\n  };\r\n  const ITALIC = {\r\n    className: 'emphasis',\r\n    contains: [], // defined later\r\n    variants: [\r\n      {\r\n        begin: /\\*(?![*\\s])/,\r\n        end: /\\*/\r\n      },\r\n      {\r\n        begin: /_(?![_\\s])/,\r\n        end: /_/,\r\n        relevance: 0\r\n      }\r\n    ]\r\n  };\r\n\r\n  // 3 level deep nesting is not allowed because it would create confusion\r\n  // in cases like `***testing***` because where we don't know if the last\r\n  // `***` is starting a new bold/italic or finishing the last one\r\n  const BOLD_WITHOUT_ITALIC = hljs.inherit(BOLD, { contains: [] });\r\n  const ITALIC_WITHOUT_BOLD = hljs.inherit(ITALIC, { contains: [] });\r\n  BOLD.contains.push(ITALIC_WITHOUT_BOLD);\r\n  ITALIC.contains.push(BOLD_WITHOUT_ITALIC);\r\n\r\n  let CONTAINABLE = [\r\n    INLINE_HTML,\r\n    LINK\r\n  ];\r\n\r\n  [\r\n    BOLD,\r\n    ITALIC,\r\n    BOLD_WITHOUT_ITALIC,\r\n    ITALIC_WITHOUT_BOLD\r\n  ].forEach(m => {\r\n    m.contains = m.contains.concat(CONTAINABLE);\r\n  });\r\n\r\n  CONTAINABLE = CONTAINABLE.concat(BOLD, ITALIC);\r\n\r\n  const HEADER = {\r\n    className: 'section',\r\n    variants: [\r\n      {\r\n        begin: '^#{1,6}',\r\n        end: '$',\r\n        contains: CONTAINABLE\r\n      },\r\n      {\r\n        begin: '(?=^.+?\\\\n[=-]{2,}$)',\r\n        contains: [\r\n          { begin: '^[=-]*$' },\r\n          {\r\n            begin: '^',\r\n            end: \"\\\\n\",\r\n            contains: CONTAINABLE\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  };\r\n\r\n  const BLOCKQUOTE = {\r\n    className: 'quote',\r\n    begin: '^>\\\\s+',\r\n    contains: CONTAINABLE,\r\n    end: '$'\r\n  };\r\n\r\n  return {\r\n    name: 'Markdown',\r\n    aliases: [\r\n      'md',\r\n      'mkdown',\r\n      'mkd'\r\n    ],\r\n    contains: [\r\n      HEADER,\r\n      INLINE_HTML,\r\n      LIST,\r\n      BOLD,\r\n      ITALIC,\r\n      BLOCKQUOTE,\r\n      CODE,\r\n      HORIZONTAL_RULE,\r\n      LINK,\r\n      LINK_REFERENCE\r\n    ]\r\n  };\r\n}\r\n\r\nexport { markdown as default };\r\n"],
  "mappings": "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",
  "names": []
}
